#!/usr/bin/env python3\n\"\"\"\nPIRATE TRANSPORT SYSTEM - WORKING DEMO\n\nA simple demonstration of the pirate transport system's key features:\n- Pirates gather intelligence about cargo ships\n- Raiders launch based on supply needs and intelligence\n- Successful raids create supply chain disruptions\n- Proper balancing prevents raider spam\n\"\"\"\n\nimport random\nimport time\nfrom dataclasses import dataclass\nfrom typing import List, Dict\n\n@dataclass\nclass CargoIntelligence:\n    ship_id: str\n    cargo_manifest: dict\n    estimated_value: float\n    intel_timestamp: float\n    origin: str\n    destination: str\n\nclass Vec3:\n    def __init__(self, x=0.0, y=0.0, z=0.0):\n        self.x, self.y, self.z = x, y, z\n    \n    def __sub__(self, other):\n        return Vec3(self.x - other.x, self.y - other.y, self.z - other.z)\n    \n    def length(self):\n        return (self.x**2 + self.y**2 + self.z**2)**0.5\n    \n    def normalized(self):\n        length = self.length()\n        if length == 0:\n            return Vec3(0, 0, 0)\n        return Vec3(self.x/length, self.y/length, self.z/length)\n    \n    def __add__(self, other):\n        return Vec3(self.x + other.x, self.y + other.y, self.z + other.z)\n    \n    def __mul__(self, scalar):\n        return Vec3(self.x * scalar, self.y * scalar, self.z * scalar)\n\nclass Planet:\n    def __init__(self, name, position):\n        self.name = name\n        self.position = position\n\nclass CargoShip:\n    def __init__(self, ship_id, origin, destination, cargo, value):\n        self.id = ship_id\n        self.origin = origin\n        self.destination = destination\n        self.cargo = cargo\n        self.value = value\n        self.position = Vec3(origin.position.x, origin.position.y, origin.position.z)\n        self.delivered = False\n        self.destroyed = False\n    \n    def get_cargo_description(self):\n        return \", \".join([f\"{qty} {commodity}\" for commodity, qty in self.cargo.items()])\n\nclass PirateRaider:\n    def __init__(self, base, target_intel=None):\n        self.base = base\n        self.target_intel = target_intel\n        self.position = Vec3(base.position.x, base.position.y, base.position.z)\n        self.hunting = True\n        self.stolen_cargo = {}\n        self.launch_time = time.time()\n        self.max_patrol_time = 120  # 2 minutes\n        \n        if target_intel:\n            print(f\"üè¥‚Äç‚ò†Ô∏è Pirate raider launched from {base.name}\")\n            print(f\"   Target: {target_intel.cargo_manifest} worth {target_intel.estimated_value} credits\")\n        else:\n            print(f\"üè¥‚Äç‚ò†Ô∏è Pirate patrol launched from {base.name}\")\n    \n    def update(self, cargo_ships: List[CargoShip]):\n        # Return to base if patrolled too long\n        if time.time() - self.launch_time > self.max_patrol_time:\n            self.hunting = False\n            return self.return_to_base()\n        \n        if self.hunting:\n            # Look for targets\n            for cargo_ship in cargo_ships[:]:\n                if cargo_ship.destroyed or cargo_ship.delivered:\n                    continue\n                \n                # Simple distance check\n                distance = (self.position - cargo_ship.position).length()\n                if distance < 50:  # Within attack range\n                    if self.should_attack(cargo_ship):\n                        return self.attack_cargo_ship(cargo_ship, cargo_ships)\n        \n        return None  # Still hunting\n    \n    def should_attack(self, cargo_ship):\n        # Attack if matches target intelligence\n        if self.target_intel:\n            for commodity in self.target_intel.cargo_manifest:\n                if commodity in cargo_ship.cargo:\n                    return True\n        \n        # Attack if valuable\n        return cargo_ship.value > 1000\n    \n    def attack_cargo_ship(self, cargo_ship, cargo_ships):\n        print(f\"üè¥‚Äç‚ò†Ô∏è PIRATE ATTACK!\")\n        print(f\"Raider attacking cargo ship: {cargo_ship.get_cargo_description()}\")\n        \n        # 70% success rate\n        if random.random() < 0.7:\n            print(f\"üíÄ Pirate raid successful! Stolen: {cargo_ship.get_cargo_description()}\")\n            print(f\"   Value: {cargo_ship.value} credits\")\n            \n            self.stolen_cargo = cargo_ship.cargo.copy()\n            cargo_ship.destroyed = True\n            \n            # Remove from active ships\n            if cargo_ship in cargo_ships:\n                cargo_ships.remove(cargo_ship)\n            \n            print(f\"üìâ {cargo_ship.destination.name} supply disruption: -{sum(cargo_ship.cargo.values())} units\")\n            \n            self.hunting = False\n            return \"raid_successful\"\n        else:\n            print(f\"‚öîÔ∏è Cargo ship fought off pirate attack!\")\n            self.hunting = False\n            return \"raid_failed\"\n    \n    def return_to_base(self):\n        print(f\"üè¥‚Äç‚ò†Ô∏è Raider returned to {self.base.name}\")\n        if self.stolen_cargo:\n            print(f\"   Delivered stolen goods: {self.get_stolen_description()}\")\n        else:\n            print(f\"   Returned empty-handed\")\n        return \"returned\"\n    \n    def get_stolen_description(self):\n        if not self.stolen_cargo:\n            return \"Nothing\"\n        return \", \".join([f\"{qty} {commodity}\" for commodity, qty in self.stolen_cargo.items()])\n\nclass PirateBase:\n    def __init__(self, name, position):\n        self.name = name\n        self.position = position\n        self.intelligence_cache: List[CargoIntelligence] = []\n        self.stockpiles = {\"food\": 150, \"fuel\": 100, \"weapons\": 75, \"medicine\": 40}\n        self.daily_consumption = {\"food\": 15, \"fuel\": 10, \"weapons\": 3, \"medicine\": 5}\n        self.last_raid_launch = 0\n        self.raid_interval = 60  # 60 seconds between raids\n        self.max_raiders = 2  # Limit active raiders\n        self.active_raiders = 0\n    \n    def update(self, dt):\n        # Consume supplies\n        for commodity, consumption in self.daily_consumption.items():\n            per_second = consumption / 300.0  # 5-minute game day\n            self.stockpiles[commodity] = max(0, self.stockpiles[commodity] - (per_second * dt))\n        \n        # Consider launching raiders\n        current_time = time.time()\n        if (current_time - self.last_raid_launch > self.raid_interval and \n            self.active_raiders < self.max_raiders):\n            \n            if self.should_launch_raider():\n                self.last_raid_launch = current_time\n                return self.launch_raider()\n        \n        return None\n    \n    def should_launch_raider(self):\n        # Check if supplies are low\n        for commodity, consumption in self.daily_consumption.items():\n            current_stock = self.stockpiles.get(commodity, 0)\n            days_remaining = current_stock / consumption if consumption > 0 else float('inf')\n            \n            if days_remaining < 8:  # Launch raids when low on supplies\n                return True\n        \n        # 20% chance if we have good intelligence\n        if self.intelligence_cache and random.random() < 0.2:\n            return True\n        \n        return False\n    \n    def launch_raider(self):\n        # Select target from intelligence\n        target_intel = self.select_best_target()\n        \n        raider = PirateRaider(Planet(self.name, self.position), target_intel)\n        self.active_raiders += 1\n        return raider\n    \n    def select_best_target(self):\n        if not self.intelligence_cache:\n            return None\n        \n        # Select most valuable recent intelligence\n        recent_intel = [intel for intel in self.intelligence_cache \
                       if time.time() - intel.intel_timestamp < 300]  # 5 minutes\n        \n        if recent_intel:\n            return max(recent_intel, key=lambda x: x.estimated_value)\n        \n        return None\n    \n    def receive_intelligence(self, intelligence: CargoIntelligence):\n        self.intelligence_cache.append(intelligence)\n        # Keep only last 8 reports\n        self.intelligence_cache = self.intelligence_cache[-8:]\n        print(f\"üïµÔ∏è {self.name} received intelligence: {intelligence.cargo_manifest} worth {intelligence.estimated_value}\")\n    \n    def raider_returned(self):\n        self.active_raiders = max(0, self.active_raiders - 1)\n\nclass PirateDemo:\n    def __init__(self):\n        # Create planets\n        self.agricultural_planet = Planet(\"Agricultural Planet\", Vec3(-50, 0, 0))\n        self.mining_planet = Planet(\"Mining Planet\", Vec3(50, 0, 0))\n        self.tech_planet = Planet(\"Tech Planet\", Vec3(0, 0, 50))\n        \n        # Create pirate base\n        self.pirate_base = PirateBase(\"Pirate Base Skull Island\", Vec3(0, 0, -50))\n        \n        # Active ships\n        self.cargo_ships: List[CargoShip] = []\n        self.raiders: List[PirateRaider] = []\n        \n        # Timing\n        self.last_cargo_spawn = 0\n        self.cargo_spawn_interval = 25  # 25 seconds\n        self.last_status_time = 0\n        self.start_time = time.time()\n    \n    def spawn_cargo_ship(self):\n        routes = [\n            (self.agricultural_planet, self.mining_planet, {\"food\": 150}, 1500),\n            (self.mining_planet, self.tech_planet, {\"minerals\": 200}, 2000),\n            (self.tech_planet, self.agricultural_planet, {\"technology\": 50}, 1000),\n            (self.agricultural_planet, self.tech_planet, {\"food\": 100}, 1000),\n        ]\n        \n        origin, destination, cargo, value = random.choice(routes)\n        ship_id = f\"CARGO-{int(time.time())}-{random.randint(1000, 9999)}\"\n        \n        cargo_ship = CargoShip(ship_id, origin, destination, cargo, value)\n        self.cargo_ships.append(cargo_ship)\n        \n        print(f\"üöõ Cargo ship launched: {origin.name} ‚Üí {destination.name}\")\n        print(f\"   Cargo: {cargo_ship.get_cargo_description()}\")\n        \n        # 40% chance pirates observe this ship\n        if random.random() < 0.4:\n            intelligence = CargoIntelligence(\n                ship_id=ship_id,\n                cargo_manifest=cargo.copy(),\n                estimated_value=value,\n                intel_timestamp=time.time(),\n                origin=origin.name,\n                destination=destination.name\n            )\n            self.pirate_base.receive_intelligence(intelligence)\n    \n    def update(self, dt):\n        current_time = time.time()\n        \n        # Spawn cargo ships\n        if current_time - self.last_cargo_spawn > self.cargo_spawn_interval:\n            self.spawn_cargo_ship()\n            self.last_cargo_spawn = current_time\n        \n        # Update pirate base (may launch raiders)\n        new_raider = self.pirate_base.update(dt)\n        if new_raider:\n            self.raiders.append(new_raider)\n        \n        # Update raiders\n        for raider in self.raiders[:]:\n            result = raider.update(self.cargo_ships)\n            if result in [\"raid_successful\", \"raid_failed\", \"returned\"]:\n                self.raiders.remove(raider)\n                self.pirate_base.raider_returned()\n        \n        # Simple cargo ship movement (just mark as delivered after time)\n        for cargo_ship in self.cargo_ships[:]:\n            if not cargo_ship.destroyed and random.random() < 0.01:  # 1% chance per frame\n                cargo_ship.delivered = True\n                print(f\"‚úÖ Cargo delivered to {cargo_ship.destination.name}: {cargo_ship.get_cargo_description()}\")\n                self.cargo_ships.remove(cargo_ship)\n        \n        # Status updates every 20 seconds\n        if current_time - self.last_status_time > 20:\n            self.show_status()\n            self.last_status_time = current_time\n    \n    def show_status(self):\n        print(f\"\\nüìä PIRATE SYSTEM STATUS:\")\n        print(f\"Active Cargo Ships: {len(self.cargo_ships)}\")\n        print(f\"Active Raiders: {len(self.raiders)}\")\n        print(f\"Pirate Base Stockpiles: {dict((k, round(v, 1)) for k, v in self.pirate_base.stockpiles.items())}\")\n        print(f\"Intelligence Reports: {len(self.pirate_base.intelligence_cache)}\")\n        print(f\"Runtime: {int(time.time() - self.start_time)} seconds\")\n        print(\"=\" * 60)\n\ndef run_demo():\n    print(\"üè¥‚Äç‚ò†Ô∏è PIRATE TRANSPORT SYSTEM - WORKING DEMO\")\n    print(\"Demonstrating intelligent pirate behavior with proper balancing\")\n    print(\"Features:\")\n    print(\"- Pirates gather intelligence about cargo shipments\")\n    print(\"- Raiders launch based on supply needs and intelligence\")\n    print(\"- Maximum 2 active raiders to prevent spam\")\n    print(\"- Economic consequences from successful raids\")\n    print(\"=\" * 60)\n    \n    demo = PirateDemo()\n    end_time = time.time() + 180  # 3-minute demo\n    last_update = time.time()\n    \n    try:\n        while time.time() < end_time:\n            current_time = time.time()\n            dt = current_time - last_update\n            last_update = current_time\n            \n            demo.update(dt)\n            time.sleep(0.2)  # 5 FPS for demo\n            \n    except KeyboardInterrupt:\n        print(\"\\nüõë Demo stopped by user\")\n    \n    print(\"\\nüèÅ Demo completed!\")\n    print(\"Final Statistics:\")\n    print(f\"Cargo Ships: {len(demo.cargo_ships)}\")\n    print(f\"Active Raiders: {len(demo.raiders)}\")\n    print(f\"Intelligence Reports: {len(demo.pirate_base.intelligence_cache)}\")\n    print(f\"Pirate Stockpiles: {dict((k, round(v, 1)) for k, v in demo.pirate_base.stockpiles.items())}\")\n    \n    print(\"\\n‚úÖ Pirate system working correctly with balanced behavior!\")\n\nif __name__ == \"__main__\":\n    run_demo()"